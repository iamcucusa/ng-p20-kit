// Pegasus Design System - Centralized Breakpoints
// This file provides a single source of truth for all breakpoints across the application
// Auto-generated by the theme system - DO NOT EDIT MANUALLY

@use 'sass:map';

// =============================================================================
// BREAKPOINT DEFINITIONS
// =============================================================================

// Comprehensive breakpoints system
// Combines Tailwind CSS, PrimeFlex, and custom breakpoints for maximum compatibility

// Standard breakpoints (Tailwind CSS defaults + PrimeFlex compatibility)
$breakpoints: (
  'xs': 0px,        // Extra small devices (phones)
  'sm': 576px,      // Small devices (PrimeFlex compatibility)
  'md': 768px,      // Medium devices (tablets)
  'lg': 992px,      // Large devices (PrimeFlex compatibility)
  'xl': 1200px,     // Extra large devices (PrimeFlex compatibility)
  '2xl': 1536px,    // 2X large devices (ultra-wide screens)
  '3xl': 1920px     // 3X large devices (4K displays)
);

// Tailwind CSS specific breakpoints (for utility classes)
$tailwind-breakpoints: (
  'sm': 640px,      // Tailwind small
  'md': 768px,      // Tailwind medium
  'lg': 1024px,     // Tailwind large
  'xl': 1280px,     // Tailwind extra large
  '2xl': 1536px     // Tailwind 2X large
);

// Semantic breakpoints for better readability
$semantic-breakpoints: (
  'mobile': 576px,      // Mobile devices (PrimeFlex)
  'tablet': 768px,      // Tablet devices
  'laptop': 992px,      // Laptop devices (PrimeFlex)
  'desktop': 1200px,    // Desktop devices (PrimeFlex)
  'wide': 1536px,       // Wide desktop devices
  'ultra-wide': 1920px // Ultra-wide displays
);

// =============================================================================
// BREAKPOINT MIXINS
// =============================================================================

// Mobile-first approach (min-width)
@mixin xs-up {
  @media (min-width: map.get($breakpoints, 'xs')) {
    @content;
  }
}

@mixin sm-up {
  @media (min-width: map.get($breakpoints, 'sm')) {
    @content;
  }
}

@mixin md-up {
  @media (min-width: map.get($breakpoints, 'md')) {
    @content;
  }
}

@mixin lg-up {
  @media (min-width: map.get($breakpoints, 'lg')) {
    @content;
  }
}

@mixin xl-up {
  @media (min-width: map.get($breakpoints, 'xl')) {
    @content;
  }
}

@mixin xxl-up {
  @media (min-width: map.get($breakpoints, '2xl')) {
    @content;
  }
}

@mixin xxxl-up {
  @media (min-width: map.get($breakpoints, '3xl')) {
    @content;
  }
}

// Semantic mixins for better readability
@mixin mobile-up {
  @media (min-width: map.get($semantic-breakpoints, 'mobile')) {
    @content;
  }
}

@mixin tablet-up {
  @media (min-width: map.get($semantic-breakpoints, 'tablet')) {
    @content;
  }
}

@mixin laptop-up {
  @media (min-width: map.get($semantic-breakpoints, 'laptop')) {
    @content;
  }
}

@mixin desktop-up {
  @media (min-width: map.get($semantic-breakpoints, 'desktop')) {
    @content;
  }
}

@mixin wide-up {
  @media (min-width: map.get($semantic-breakpoints, 'wide')) {
    @content;
  }
}

@mixin ultra-wide-up {
  @media (min-width: map.get($semantic-breakpoints, 'ultra-wide')) {
    @content;
  }
}

// Desktop-first approach (max-width)
@mixin mobile-down {
  @media (max-width: map.get($breakpoints, 'sm') - 1px) {
    @content;
  }
}

@mixin tablet-down {
  @media (max-width: map.get($breakpoints, 'md') - 1px) {
    @content;
  }
}

@mixin desktop-down {
  @media (max-width: map.get($breakpoints, 'lg') - 1px) {
    @content;
  }
}

@mixin xl-down {
  @media (max-width: map.get($breakpoints, 'xl') - 1px) {
    @content;
  }
}

// Range-based breakpoints
@mixin tablet-only {
  @media (min-width: map.get($breakpoints, 'md')) and (max-width: map.get($breakpoints, 'lg') - 1px) {
    @content;
  }
}

@mixin desktop-only {
  @media (min-width: map.get($breakpoints, 'lg')) and (max-width: map.get($breakpoints, 'xl') - 1px) {
    @content;
  }
}

// =============================================================================
// UTILITY FUNCTIONS
// =============================================================================

// Get breakpoint value
@function breakpoint($name) {
  @return map.get($breakpoints, $name);
}

// Get semantic breakpoint value
@function semantic-breakpoint($name) {
  @return map.get($semantic-breakpoints, $name);
}

// Check if breakpoint exists
@function breakpoint-exists($name) {
  @return map.has-key($breakpoints, $name);
}

// =============================================================================
// RESPONSIVE MIXINS
// =============================================================================

// Responsive container with consistent padding
@mixin responsive-container {
  padding-left: var(--spacing-3);
  padding-right: var(--spacing-3);
  
  @include mobile-up {
    padding-left: var(--spacing-4);
    padding-right: var(--spacing-4);
  }
  
  @include tablet-up {
    padding-left: var(--spacing-5);
    padding-right: var(--spacing-5);
  }
  
  @include desktop-up {
    padding-left: var(--spacing-6);
    padding-right: var(--spacing-6);
  }
  
  @include wide-up {
    padding-left: var(--spacing-8);
    padding-right: var(--spacing-8);
  }
}

// Responsive typography scaling
@mixin responsive-typography($base-size, $scale-factor: 1.2) {
  font-size: $base-size;
  
  @include mobile-up {
    font-size: calc(#{$base-size} * #{$scale-factor});
  }
  
  @include desktop-up {
    font-size: calc(#{$base-size} * #{$scale-factor} * #{$scale-factor});
  }
}

// Responsive grid columns
@mixin responsive-grid($mobile: 1, $tablet: 2, $desktop: 3, $wide: 4) {
  display: grid;
  grid-template-columns: repeat($mobile, 1fr);
  gap: var(--spacing-4);
  
  @include mobile-up {
    grid-template-columns: repeat($tablet, 1fr);
    gap: var(--spacing-5);
  }
  
  @include desktop-up {
    grid-template-columns: repeat($desktop, 1fr);
    gap: var(--spacing-6);
  }
  
  @include wide-up {
    grid-template-columns: repeat($wide, 1fr);
    gap: var(--spacing-8);
  }
}